{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Ansible","text":"","link":"/2019/04/30/ansible/"},{"title":"armbian-orangepione-qemu","text":"","link":"/2020/05/29/armbian-orangepione-qemu/"},{"title":"Armbian","text":"Armbian documentation Board SettingOur board (Orange Pi One Plus) leverages Allwiner H6 which is a 64-bit (Cortex A53) ARM processor. NoteThere are different Cortext-A53 implementations, and Allwinner (Sunnix) H6 is one of them. What is Armbian?Armbian is a lightweight Linux distor (based on Debian or Ubuntu) with XFCE desktop for ARM processors. Write Armbian on SD-CardPrepare SD card (four methodes): 1234zcat Armbian_20.02.1_Orangepioneplus_buster_current_5.4.20.img.gz | pv | dd of=/dev/mmcblkX bs=1Mdd if=Armbian_20.02.1_Orangepioneplus_buster_current_5.4.20.img of=/dev/mmcblkX bs=1M balena-etcher Armbian_20.02.1_Orangepioneplus_buster_current_5.4.20.img.gz -d /dev/mmcblkXbalena-etcher Armbian_20.02.1_Orangepioneplus_buster_current_5.4.20.img -d /dev/mmcblkX Change settingsYou should modify following file:1/boot/armbianEnv.text Look at CPU temperatureProprt cooling is need for boards with A64 processors. Keep eye on CPU usage by command:1sudo armbianmonitor -r Remove CPU frequency limit for H6Default setting for CPU frequency is as follows: 1CPU configuration: 480000 - 1810000 with ondemand The H6 CPU frequency has ben soft-capped at 1,48 GHz to avoid thermal throttling too fast. This limit can be lifted by editing /etc/default/cpufrequtils and set MAX_SPEED to 1810000.","link":"/2020/05/29/armbian/"},{"title":"bash-tutorial","text":"","link":"/2019/03/11/bash-tutorial/"},{"title":"Add Boost Libraries to CMake","text":"Add needed dependencies to CMakeLists.txt file as follows: 1234567891011set(Boost_USE_STATIC_LIBS OFF) set(Boost_USE_MULTITHREADED ON) set(Boost_USE_STATIC_RUNTIME OFF) find_package(Boost 1.69.0 COMPONENTS asio filesystem regex) if(Boost_FOUND) include_directories(${Boost_INCLUDE_DIRS}) add_executable(progname file1.cxx file2.cxx) target_link_libraries(progname ${Boost_LIBRARIES})endif() Lines 1 to 3: Turn on/off boost settings. Line 5: Add boost libs, e.g system, filesystem, etc.","link":"/2019/10/22/boost-libs-cmake/"},{"title":"docker-compose","text":"","link":"/2019/03/10/docker-compose/"},{"title":"farsi-test","text":"فارسی عناوین ۱ ۱.۱ نصب ansibleبرای نصب ansible کافیست مراحل زیر را دنبال کنید: 1sudo apt install ansible","link":"/2019/03/16/farsi-test/"},{"title":"Find Command Tips","text":"","link":"/2019/03/10/find-command/"},{"title":"Groovy in VSCode","text":"IntroductionYou can use VSCode as an Editor, but not an IDE, for writing and running groovy scripts. In this regard, you need following extensions: code-groovy extension by Marlon Franca Code Runner extension by formulahendry.code-runner Now, you can create groovy files of .groovy extension and run them by right clicking in file editor and selecting ‘code runner’ menu item. Config Code RunnerYou should put groovy location in environment PATH, otherwise you need to config code runner and set the application path explicitly: press “Ctrl + ,” to open settings window Search for “Code runner config” Find ‘Executor Map’ and click on ‘Edit in settings.json’ Add following section to settings.json:123456789101112\"code-runner.executorMap\": { \"groovy\": \"/home/javad/Applications/groovy-2.5.6/bin/groovy\", \"javascript\": \"node\", \"php\": \"C:\\\\php\\\\php.exe\", \"python\": \"python\", \"perl\": \"perl\", \"ruby\": \"C:\\\\Ruby23-x64\\\\bin\\\\ruby.exe\", \"go\": \"go run\", \"html\": \"\\\"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\\\"\", \"java\": \"cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt\", \"c\": \"cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt\"} Now, you can run groovy files from VSCode.","link":"/2019/06/23/groovy-in-vscode/"},{"title":"Hexo Commands","text":"Create a new post 1hexo new post &lt;post-file-name&gt; Running local server 1hexo server Deploy to github server 1hexo generate &amp;&amp; hexo deploy Add RTL support to your articles: Use directions: rtl option in header section, not recommended Wrap your paragraph with html tag.1&lt;p dir='rtl' style=\"background-color: blue;\"&gt;&lt;/p&gt;","link":"/2019/10/02/hexo-commands/"},{"title":"Hexo Config","text":"Add RTL support to your articles: Use directions: rtl option in header section, not recommended. Wrap your paragraph with html tag.1&lt;p dir='rtl' style=\"background-color: blue;\"&gt;&lt;/p&gt;","link":"/2019/10/30/hexo-config/"},{"title":"Hexo Getting Started","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/03/10/hexo-getting-started/"},{"title":"Install Docker Compose","text":"Docker compose is needed when we need to run several containers together. Installing docker-compose can be done in one of the following ways: Method 1- Download binary fileMaybe, the easiest and more straightforward method of installing docker-compose is simply downloading and copying itto the proper directory: NoteYou need to replace docker-compose version (1.23.2) with the last stable released number. Download docker-compose: 1sudo curl -L \"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Make the file executable: 1sudo chmod +x /usr/local/bin/docker-compose Optionally, dowloand bash-complete file: 1sudo curl -L \"https://raw.githubusercontent.com/docker/compose/1.23.2/contrib/completion/bash/docker-compose\" -o /etc/bash_completion.d/docker-compose Now, you can check docker-compose is installed correctly:12docker-compose --version# docker-compose version 1.23.2, build 1110ad01 Method 2- Install using PyPiIn this regard, you need python and pip to be already installed.1pip install docker-compose","link":"/2019/03/10/install-docker-compose/"},{"title":"Install Docker","text":"For the complete instructions please follow the instructions on docker official document page. Install Docker on UbuntuInstall Docker on CentOS","link":"/2019/03/10/install-docker/"},{"title":"Install and runing JDK on Ubuntu","text":"Extract and copy files:12sudo mkdir -p /opt/javasudo tar zxvf jdk-11-linux-x64.tar.gz --directory /opt/java You can also use /usr/lib/jvm path. Register newly installed jdk:1sudo update-alternatives --install /usr/bin/java java /opt/java/jdk-11-linux-x64/bin/ Outputs:java 100 Choosing between installed java programs:1sudo update-alternatives --config java Select * for keeping currently selected item or the number of desired application. Which default java version is used:1sudo update-alternatives --display java Repeat steps 2 to 4 for setting default javac application. Old fashion InstallationIs done by updating ~/.bashrc or ~/.zshrc files and defining following environment variables: JAVA_HOME PATH","link":"/2019/09/28/install-jdk-ubuntu/"},{"title":"Install and Setup Apache Mxnet","text":"برای نصب Apache Mxnet دستورات زیر را اجرا کنید:در ابتدا ممکن است بخواهید pip را بروزرسانی کنید. در صورتی که احتمالا نسخه pip نصب شده قدیمی باشد‍‍‍‍‍‍‍‍‍‍‍‍12pip install --upgrade pippip install --upgrade setuptools و سپس به سادگی اجرا کنید:‍‍‍‍‍‍‍‍‍‍‍‍1pip install mxnet این کار ممکن است کمی بکشد ولی در نهایت با نصب موفق مشاهده خواهید کرد که وابستگی های Apache Mxnet نیز به همراه آن نصب شده اند: Nump Graphviz 123Successfully built numpyInstalling collected packages: numpy, graphviz, mxnetSuccessfully installed graphviz-0.8.4 mxnet-1.6.0 numpy-1.18.4","link":"/2020/05/06/install-mxnet/"},{"title":"Installing Rocket.Chat Server","text":"Running Rochat.Chat server as docker container is straightforward. RequirementsIn order to run Rocket.Chat server, the following softwares are need to installed:s Install Docker Install Docker Compose Steps to setup Rocket.chat server1. Create a user to run Rocket.Chat serviceFor security reasons, it is highly suggested to run services as a non-root user. Add a user: 1useradd payamresan Add docker group to ‘payamresan’ user: 1usermod -aG docker payamresan Check out the created user is a member of ‘docker’ group: 12id payamresan# uid=1001(payamresan) gid=1001(payamresan) groups=994(docker),1001(payamresan) 2. Pull docker images Rocket.chat uses Mongodb as a database. Then, following images are needed to be in local docker registery 12docker pull mongodocker pull rocketchat/rocket.chat Create the following directory: 1mkdir -p /var/www/rocket.chat Create docker-compose.yml file in above directory: 12345678910111213141516171819202122232425262728293031323334db: image: mongo volumes: - ./data/runtime/db:/data/db - ./data/dump:/dump ports: - 27017:27017 command: mongod --smallfilesrocketchat: image: rocketchat/rocket.chat:latest environment: - MONGO_URL=mongodb://db:27017/rocketchat - ROOT_URL=http://192.168.100.118 - Accounts_UseDNSDomainCheck=True links: - db:db ports: - 3000:3000hubot: image: rocketchat/hubot-rocketchat:latest environment: - ROCKETCHAT_URL=192.168.100.118:3000 - ROCKETCHAT_ROOM=GENERAL - ROCKETCHAT_USER=Botname - ROCKETCHAT_PASSWORD=BotPassw0rd - BOT_NAME=Botname - EXTERNAL_SCRIPTS=hubot-help,hubot-seen,hubot-links,hubot-greetings links: - rocketchat:rocketchat# this is used to expose the hubot port for notifications on the host on port 3001, e.g. for hubot-jenkins-notifier ports: - 3001:8080 Give access to payamresan user: 12chown payamresan:docker /var/www/rocket.chat/chown payamresan:docker /var/www/rocket.chat/docker-compose.yml 3. Create systemd unit servicesCreate the following file in /etc/systemd/system/ directory: payamresan.service 1234567891011121314151617181920212223242526[Unit]Description=Payamresan container starter based on docker-composeAfter=docker.service network-online.targetRequires=docker.service network-online.target[Service]WorkingDirectory=/var/www/rocket.chatUser=payamresanGroup=dockerType=oneshotRemainAfterExit=yes### Net connection possibly is not available, then I comment the following command#ExecStartPre=-/usr/local/bin/docker-compose pull --quietExecStart=/usr/local/bin/docker-compose up -d dbExecStart=/usr/local/bin/docker-compose up -d rocketchatExecStop=/usr/local/bin/docker-compose down### Net connection possibly is not available, then I comment the following command#ExecReload=/usr/local/bin/docker-compose pull --quietExecStart=/usr/local/bin/docker-compose up -d dbExecReload=/usr/local/bin/docker-compose up -d rocketchat[Install]WantedBy=multi-user.target Reload systemd daemons to identify our recently created service: 1systemctl daemon-reload Start payamresan service: 1systemctl start payamresan Check service status: 1systemctl status payamresan You should see the following output: 12345678910● payamresan.service - Payamresan container starter based on docker-compose Loaded: loaded (/etc/systemd/system/payamresan.service; enabled; vendor preset: disabled) Active: active (exited) since Sat 2019-02-23 17:05:26 IRST; 2 weeks 1 days ago Process: 14296 ExecStop=/usr/local/bin/docker-compose down (code=exited, status=0/SUCCESS) Process: 14566 ExecStart=/usr/local/bin/docker-compose up -d db (code=exited, status=0/SUCCESS) Process: 14472 ExecStart=/usr/local/bin/docker-compose up -d rocketchat (code=exited, status=0/SUCCESS) Process: 14387 ExecStart=/usr/local/bin/docker-compose up -d db (code=exited, status=0/SUCCESS) Main PID: 14566 (code=exited, status=0/SUCCESS) Memory: 0B CGroup: /system.slice/payamresan.service In the case of any failure, check error message with following command: 1journalctl -xe Enable payamresan service, so it is started automatically after system boot. 1systemctl enable payamresan","link":"/2020/04/10/install-rocket.chat-server/"},{"title":"JavaFX Custom Cell Renderer","text":"Some useful links: JavaFX custom list cell, updateItem being called a lot JavaFX ListView with button in each cell JavaFX - ListView Item with an Image Button Custom ListCell in a JavaFX ListView","link":"/2019/10/07/javafx-custom-cell-renderer/"},{"title":"JavaFX with Gradle","text":"gradle.build1234```## Run```sh","link":"/2019/10/30/javafx-gradle/"},{"title":"JavaFX with Maven","text":"Project structure:Add module-info.java in the default package:1234module org.openjfx.hellofx { requires javafx.controls; exports org.openjfx.hellofx;} pom.xml file:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162 &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.openjfx&lt;/groupId&gt; &lt;artifactId&gt;HelloFXWithMaven&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;11&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;11&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.openjfx&lt;/groupId&gt; &lt;artifactId&gt;javafx-controls&lt;/artifactId&gt; &lt;version&gt;12.0.1&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;3.8.0&lt;/version&gt; &lt;configuration&gt; &lt;release&gt;11&lt;/release&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.openjfx&lt;/groupId&gt; &lt;artifactId&gt;javafx-maven-plugin&lt;/artifactId&gt; &lt;version&gt;0.0.2&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;default-cli&lt;/id&gt; &lt;configuration&gt; &lt;mainClass&gt;org.openjfx.hellofx/org.openjfx.hellofx.App&lt;/mainClass&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;debug&lt;/id&gt; &lt;configuration&gt; &lt;options&gt; &lt;option&gt;-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000&lt;/option&gt; &lt;/options&gt; &lt;mainClass&gt;org.openjfx.hellofx/org.openjfx.hellofx.App&lt;/mainClass&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;reporting&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-checkstyle-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;configLocation&gt;config/sun_checks.xml&lt;/configLocation&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/reporting&gt;&lt;/project&gt; Run1mvn javafx:run","link":"/2019/10/30/javafx-maven/"},{"title":"Keycloak Get Token","text":"گرفتن توکن جدید از keycloakدر هر یک از روش های مورد نظر فیلدهای زیر را وارد نمایید: server port realm client_id user_name passowrd CURL1234curl -X POST \\ http://&lt;server&gt;:&lt;port&gt;/auth/realms/&lt;realm&gt;/protocol/openid-connect/token \\ -H 'Content-Type: application/x-www-form-urlencoded' \\ -d 'client_id=&lt;client_id&gt;&amp;username=&lt;user_name&gt;&amp;password=&lt;password&gt;&amp;grant_type=password' Postman JMeter","link":"/2019/11/02/keycloak-get-token/"},{"title":"تنظیم nginx با keycloak","text":"","link":"/2019/10/24/keycloak-nginx-setup/"},{"title":"Connect Spring Boot-2.x to Keycloak-4.6","text":"Add following dependency to pom.xml1234567&lt;dependency&gt; &lt;groupId&gt;org.keycloak.bom&lt;/groupId&gt; &lt;artifactId&gt;keycloak-adapter-bom&lt;/artifactId&gt; &lt;version&gt;4.6.0.Final&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt;&lt;/dependency&gt; 1234&lt;dependency&gt; &lt;groupId&gt;org.keycloak&lt;/groupId&gt; &lt;artifactId&gt;keycloak-spring-boot-starter&lt;/artifactId&gt;&lt;/dependency&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101import org.kodnuts.common.web.filter.CorsFilter;import org.keycloak.adapters.KeycloakConfigResolver;import org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver;import org.keycloak.adapters.springsecurity.KeycloakSecurityComponents;import org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider;import org.keycloak.adapters.springsecurity.client.KeycloakClientRequestFactory;import org.keycloak.adapters.springsecurity.client.KeycloakRestTemplate;import org.keycloak.adapters.springsecurity.config.KeycloakWebSecurityConfigurerAdapter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.beans.factory.config.ConfigurableBeanFactory;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.Scope;import org.springframework.http.HttpMethod;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;import org.springframework.security.core.session.SessionRegistryImpl;import org.springframework.security.web.access.channel.ChannelProcessingFilter;import org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy;import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;import org.springframework.util.StringUtils;@Configuration@EnableWebSecurity@ComponentScan(basePackageClasses = KeycloakSecurityComponents.class)public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter { @Autowired public KeycloakClientRequestFactory keycloakClientRequestFactory; @Value(\"${spring.http.allowedOrigins:}\") private String allowedOrigins; @Autowired public void configureGlobal(AuthenticationManagerBuilder auth) { KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider(); SimpleAuthorityMapper grantedAuthorityMapper = new SimpleAuthorityMapper(); grantedAuthorityMapper.setPrefix(\"ROLE_\"); keycloakAuthenticationProvider.setGrantedAuthoritiesMapper(grantedAuthorityMapper); auth.authenticationProvider(keycloakAuthenticationProvider); } @Bean @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) public KeycloakRestTemplate keycloakRestTemplate() { return new KeycloakRestTemplate(keycloakClientRequestFactory); } @Bean @Override protected SessionAuthenticationStrategy sessionAuthenticationStrategy() { return new RegisterSessionAuthenticationStrategy(new SessionRegistryImpl()); } @Bean public KeycloakConfigResolver KeycloakConfigResolver() { return new KeycloakSpringBootConfigResolver(); } @Override protected void configure(HttpSecurity http) throws Exception { super.configure(http); http .csrf().disable() .authorizeRequests() .antMatchers(\"/favicon.ico\").permitAll() .antMatchers(\"/change-lang\").permitAll() // .antMatchers(\"/\").permitAll() .antMatchers(\"/js/**\").permitAll() .antMatchers(\"/css/**\").permitAll() .antMatchers(\"/config/**\").permitAll() .antMatchers(\"/images/**\").permitAll() .antMatchers(\"/fonts/**\").permitAll() .antMatchers(\"/lib/**\").permitAll() .antMatchers(\"/help/**\").permitAll() .antMatchers(\"/**/**.js\").permitAll() .antMatchers(\"/**/**.css\").permitAll() .antMatchers(\"/**/**.html\").permitAll() //Swagger .antMatchers(\"/swagger-resources/**\").permitAll() .antMatchers(\"/swagger-ui.html\").permitAll() .antMatchers(\"/webjars/**\").permitAll() .antMatchers(\"/v2/api-docs\").permitAll() .antMatchers(HttpMethod.GET, \"/actuator/health/**\").permitAll() .anyRequest().authenticated(); if (StringUtils.hasText(allowedOrigins)) { http.addFilterBefore(new CorsFilter(\"/**\", allowedOrigins, \"POST, GET, OPTIONS, DELETE, PUT\", \"Authorization, Content-Type, Accept, Accept-Language, x-requested-with, Cache-Control, Content-Disposition\", true, 3600) , ChannelProcessingFilter.class); } }} 12345678#####KeyCloak#####keycloak.realm=Test-Realmkeycloak.auth-server-url=http://192.168.100.111/authkeycloak.ssl-required=externalkeycloak.resource=my-appkeycloak.public-client=truekeycloak.bearer-only=truekeycloak.credentials.secret=c66ac43f-5ceb-449c-a200-6ec67001e80e 12345678910111213141516171819202122232425262728293031323334353637383940import org.kodnuts.common.model.User;import org.kodnuts.common.security.SecurityContext;import org.keycloak.KeycloakPrincipal;import org.keycloak.adapters.springsecurity.account.SimpleKeycloakAccount;import org.keycloak.representations.AccessToken;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Component;import java.security.Principal;@Componentpublic class SecurityContext { @Override public User getUser() { AccessToken token = null; try { Principal principal = ((SimpleKeycloakAccount) SecurityContextHolder.getContext().getAuthentication().getDetails()).getPrincipal(); token = ((KeycloakPrincipal) principal).getKeycloakSecurityContext().getToken(); } catch (Exception e) { System.out.println(e); } if (token == null || token.getOtherClaims() == null) { throw new Exception(\"operation.center.generate.deposit.file.setup.error\"); } Long userId = Long.valueOf(token.getOtherClaims().getOrDefault(\"userId\", null).toString()); Long organId = Long.valueOf(token.getOtherClaims().getOrDefault(\"organId\", null).toString()); Long organCode = Long.valueOf(token.getOtherClaims().getOrDefault(\"organCode\", null).toString()); Integer personalCode = Integer.valueOf(token.getOtherClaims().getOrDefault(\"personalCode\", null).toString()); String mac = token.getOtherClaims().getOrDefault(\"serverMac\", null).toString(); if (organId == null || userId == null || organCode == null || personalCode == null|| StringUtils.isEmpty(mac)) { throw new Exception(\"operation.center.generate.deposit.file.setup.error\"); } User user = new User(userId); user.setOrganId(organId); user.setOrganCode(organCode); user.setPersonalCode(personalCode); user.setMac(mac); return user; }} 123456789101112131415161718import java.util.Objects;@Datapublic class User { private Long id; private String userName; private String password; private String firstName; private String lastName; private Object status; private Byte statusCode; private String keycloakId; private String email; private Object organ; private Long organId; private Long organCode; private Integer personalCode;}","link":"/2019/10/22/keycloak-sping-boot/"},{"title":"Logstash encoder for Logback","text":"Create src/resources/logback.xml file:12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;configuration debug=\"true\"&gt; &lt;include resource=\"org/springframework/boot/logging/logback/defaults.xml\"/&gt; &lt;springProperty scope=\"context\" name=\"applicationName\" source=\"spring.application.name\"/&gt; &lt;springProperty scope=\"context\" name=\"logstash-server\" source=\"spring.logstash.server\"/&gt; &lt;property resource=\"bootstrap.properties\"/&gt; &lt;property name=\"CONSOLE_LOG_PATTERN\" value=\"%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr([${applicationName:-}]){yellow} %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}\"/&gt; &lt;appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt; &lt;encoder&gt; &lt;pattern&gt;${CONSOLE_LOG_PATTERN}&lt;/pattern&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt; &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"&gt; &lt;FileNamePattern&gt;${logback.path}/${logback.fileName}.%d{yyyy-MM-dd}.%i.log.zip&lt;/FileNamePattern&gt; &lt;maxFileSize&gt;${logback.maxFileSize}&lt;/maxFileSize&gt; &lt;maxHistory&gt;${logback.maxHistory}&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;encoder class=\"net.logstash.logback.encoder.LogstashEncoder\"&gt; &lt;!-- Note: if timezone is not given, default system timezone will be set. &lt;timeZone&gt;Asia/Tehran&lt;/timeZone&gt; &lt;timeZone&gt;UTC&lt;/timeZone&gt; --&gt; &lt;/encoder&gt; &lt;filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\"&gt; &lt;level&gt;${logback.file.level}&lt;/level&gt; &lt;/filter&gt; &lt;/appender&gt; &lt;root level=\"${logback.root.level}\"&gt; &lt;appender-ref ref=\"CONSOLE\"/&gt; &lt;appender-ref ref=\"FILE\"/&gt; &lt;/root&gt;&lt;/configuration&gt; Add its dependency in pom.xml:12345&lt;dependency&gt; &lt;groupId&gt;net.logstash.logback&lt;/groupId&gt; &lt;artifactId&gt;logstash-logback-encoder&lt;/artifactId&gt; &lt;version&gt;5.3&lt;/version&gt;&lt;/dependency&gt; Add to spring-boot property file (bootstrap.properties): 123456logback.path=${user.dir}/loglogback.maxFileSize=100MBlogback.maxHistory=150logback.root.level=INFOlogback.file.level=INFOlogback.fileName=clr-returned","link":"/2019/10/23/logback-logstash-encoder/"},{"title":"microk8s","text":"","link":"/2019/09/30/microk8s/"},{"title":"Minishift Getting Started","text":"","link":"/2019/10/23/minishift-getting-started/"},{"title":"Apache Mxnet Iterators","text":"NDArrayIter CSVIter ImageIter ImageRecordIter Custom Iterators","link":"/2020/05/06/mxnet-iterators/"},{"title":"Netbeans Platform Links","text":"Some useful links for developing netbeans platform NetBeans Platform Quick Start Using Maven NetBeans Platform Learning Trail NetBeans Property Editor Tutorial NetBeans Platform Plugin Quick Start NetBeansDeveloperFAQ Development MavenBestPractices NetBeans Platform Ribbon Bar Integration Tutorial NetBeans Platform Workflow Tutorial NetBeans Platform Selection Tutorial Using Maven NetBeans Platform Maven Command Line Tutorial NetBeans Platform Showcase propertyViewCustomization","link":"/2019/11/02/netbeans-platform-links/"},{"title":"Runnin Jenkins","text":"Download the lastest jenkins.war file and run it as following:1java -jar jenkins.war --httpPort=9292 If your server is behind firewall then open the given port number such as:1sudo ufw allow 9292/tcp JENKINS_HOMEhttp://192.168.100.116:9292/systemInfo","link":"/2019/07/10/runnin-jenkins/"},{"title":"Clustering Redis","text":"Redis clustering modelFor creating redis cluster you need at least three master nodes. Cluster topolgy for master nodes is ring and every worker(salve) node is connected to a master. Different clustering options redis-cli (redis 5 onwards) ruby (redis 3,4) Running redis nodesWe run redis instances in Docker containers, then:1docker pull redis Suppose, we have three machines: 117, 118, and 119. In every machine, run two docker instances of redis: 12docker run -d --rm --name redis-117-1 --net host redis redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yesdocker run -d --rm --name redis-117-2 --net host redis redis-server --port 6380 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes Options: -d means daemon mode, opposite to interactive mode(-it). - -net host means use physical interface for networking, instead of default bridge driver. redis-server is an application in redis container we are aiming to run. The rest are arguments to redis-server programs. Security consideration:There is a trojan for redis conatiners, so if the machine publicly available on internet make sure it is only bounded to localhost interface:1-p 127.0.0.1:6379:6379 Make sure docker containers are running:1234# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESae9e87cad613 redis &quot;docker-entrypoint.s…&quot; 4 seconds ago Up 3 seconds redis-117-2b46238ad09af redis &quot;docker-entrypoint.s…&quot; 14 seconds ago Up 14 seconds redis-117-1 Which ports are being listened by redis instances:123456789# ss -ntlp | grep redisLISTEN 0 128 *:6379 *:* users:((&quot;redis-server&quot;,pid=2724,fd=7))LISTEN 0 128 *:6380 *:* users:((&quot;redis-server&quot;,pid=2800,fd=7))LISTEN 0 128 *:16379 *:* users:((&quot;redis-server&quot;,pid=2724,fd=11))LISTEN 0 128 *:16380 *:* users:((&quot;redis-server&quot;,pid=2800,fd=11))LISTEN 0 128 :::6379 :::* users:((&quot;redis-server&quot;,pid=2724,fd=6))LISTEN 0 128 :::6380 :::* users:((&quot;redis-server&quot;,pid=2800,fd=6))LISTEN 0 128 :::16379 :::* users:((&quot;redis-server&quot;,pid=2724,fd=10))LISTEN 0 128 :::16380 :::* users:((&quot;redis-server&quot;,pid=2800,fd=10)) *:6379 means port is bounded to IPV4 interface. :::6379 means port is bounded to IPV6 interface. port 6379 is used for clients connecting redis. port 16379 is used for cluster communications. Cluster setup12export cluster_hosts=&quot;192.168.100.117:6379 192.168.100.118:6379 192.168.100.119:6379 192.168.100.117:6380 192.168.100.118:6380 192.168.100.119:6380&quot;docker run -i --net host --rm redis redis-cli --cluster create $cluster_hosts --cluster-replicas 1 The output should be something like this:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...Master[0] -&gt; Slots 0 - 5460Master[1] -&gt; Slots 5461 - 10922Master[2] -&gt; Slots 10923 - 16383Adding replica 192.168.100.118:6380 to 192.168.100.117:6379Adding replica 192.168.100.119:6380 to 192.168.100.118:6379Adding replica 192.168.100.117:6380 to 192.168.100.119:6379M: 7b4c73012383e2056958d054265410825c68e43f 192.168.100.117:6379 slots:[0-5460] (5461 slots) masterM: 10989ff2e637deb61327304822a2eb4e24fa9184 192.168.100.118:6379 slots:[5461-10922] (5462 slots) masterM: 802243bcbb4acfdc66c6e6937d2c1bbade8dba72 192.168.100.119:6379 slots:[10923-16383] (5461 slots) masterS: ceb0e5392edb85b8f2182f1b522e4d0781cea5bd 192.168.100.117:6380 replicates 802243bcbb4acfdc66c6e6937d2c1bbade8dba72S: ff871ea93201476b6de9c73f6bc8a6b62e922cb1 192.168.100.118:6380 replicates 7b4c73012383e2056958d054265410825c68e43fS: 5b655178414c62b0a2395c1c8e20ef27f0a03349 192.168.100.119:6380 replicates 10989ff2e637deb61327304822a2eb4e24fa9184Can I set the above configuration? (type &apos;yes&apos; to accept): yes&gt;&gt;&gt; Nodes configuration updated&gt;&gt;&gt; Assign a different config epoch to each node&gt;&gt;&gt; Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join...&gt;&gt;&gt; Performing Cluster Check (using node 192.168.100.117:6379)M: 7b4c73012383e2056958d054265410825c68e43f 192.168.100.117:6379 slots:[0-5460] (5461 slots) master 1 additional replica(s)M: 10989ff2e637deb61327304822a2eb4e24fa9184 192.168.100.118:6379 slots:[5461-10922] (5462 slots) master 1 additional replica(s)S: ceb0e5392edb85b8f2182f1b522e4d0781cea5bd 192.168.100.117:6380 slots: (0 slots) slave replicates 802243bcbb4acfdc66c6e6937d2c1bbade8dba72M: 802243bcbb4acfdc66c6e6937d2c1bbade8dba72 192.168.100.119:6379 slots:[10923-16383] (5461 slots) master 1 additional replica(s)S: ff871ea93201476b6de9c73f6bc8a6b62e922cb1 192.168.100.118:6380 slots: (0 slots) slave replicates 7b4c73012383e2056958d054265410825c68e43fS: 5b655178414c62b0a2395c1c8e20ef27f0a03349 192.168.100.119:6380 slots: (0 slots) slave replicates 10989ff2e637deb61327304822a2eb4e24fa9184[OK] All nodes agree about slots configuration.&gt;&gt;&gt; Check for open slots...&gt;&gt;&gt; Check slots coverage...[OK] All 16384 slots covered. Getting cluster nodes informationIn one of the redis running machines, run 1docker run -i --net host --rm redis redis-cli cluster nodes Sample output:123456ff871ea93201476b6de9c73f6bc8a6b62e922cb1 192.168.100.118:6380@16380 slave 7b4c73012383e2056958d054265410825c68e43f 0 1571211437523 5 connected802243bcbb4acfdc66c6e6937d2c1bbade8dba72 192.168.100.119:6379@16379 master - 0 1571211436000 3 connected 10923-163835b655178414c62b0a2395c1c8e20ef27f0a03349 192.168.100.119:6380@16380 slave 10989ff2e637deb61327304822a2eb4e24fa9184 0 1571211437526 6 connected10989ff2e637deb61327304822a2eb4e24fa9184 192.168.100.118:6379@16379 myself,master - 0 1571211436000 2 connected 5461-109227b4c73012383e2056958d054265410825c68e43f 192.168.100.117:6379@16379 master - 0 1571211436513 1 connected 0-5460ceb0e5392edb85b8f2182f1b522e4d0781cea5bd 192.168.100.117:6380@16380 slave 802243bcbb4acfdc66c6e6937d2c1bbade8dba72 0 1571211437000 4 connected Connecting to clusterredis-cli is a command-line tool used to connect redis. You should consider -c or cluster option when connecting to a redis node. You can connect to any cluster node (master or slave) and run a redis command:1docker run -it --rm --net=host redis redis-cli -c -h 192.168.100.117 -p 6380 Note: If you don’t specify -c option, you get an error whenever a key is located in another node. For example: 12192.168.100.117:6379&gt; get user_name(error) MOVED 5798 192.168.100.118:6379 It says that requested key is available on another server, i.e 118 However, if you had connected in cluster mode, you would have get result with a message like this: 123192.168.100.117:6380&gt; get user_name-&gt; Redirected to slot [5798] located at 192.168.100.118:6379&quot;javad&quot; As you see, redis-cli does the burdon of connecting to proper remote server, fetching, and returning the result.","link":"/2019/09/30/redis-clustering/"},{"title":"Running Jmeter","text":"Running jmeter from command line is mostly needed for two main reasons: running jmeter tests from a CI tool, e.g jenkins running jmeter remotely on a server. In this case gui overhead is not desired, though many servers run in only text mode. 1jmeter -n -t test_file.jmx -l test_result.csv -e -o result_dir -j test_output.log Test result in web format will be generated in result_dir. -n means non-gui mode -t test file [-p property-file] [-l results-file] [-j log-file] -g [csv results file] -e -o [Path to output folder] -H [your proxy server] -P [your proxy server port] For viewing different styles of running jmeter, issue this command:1jmeter -help Jmeter command-line options1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465--? print command line options and exit-h, --help print usage information and exit-v, --version print the version information and exit-p, --propfile &lt;argument&gt; the jmeter property file to use-q, --addprop &lt;argument&gt; additional JMeter property file(s)-t, --testfile &lt;argument&gt; the jmeter test(.jmx) file to run. \"-t LAST\" will load last used file-l, --logfile &lt;argument&gt; the file to log samples to-i, --jmeterlogconf &lt;argument&gt; jmeter logging configuration file (log4j2.xml)-j, --jmeterlogfile &lt;argument&gt; jmeter run log file (jmeter.log)-n, --nongui run JMeter in nongui mode-s, --server run the JMeter server-E, --proxyScheme &lt;argument&gt; Set a proxy scheme to use for the proxy server-H, --proxyHost &lt;argument&gt; Set a proxy server for JMeter to use-P, --proxyPort &lt;argument&gt; Set proxy server port for JMeter to use-N, --nonProxyHosts &lt;argument&gt; Set nonproxy host list (e.g. *.apache.org|localhost)-u, --username &lt;argument&gt; Set username for proxy server that JMeter is to use-a, --password &lt;argument&gt; Set password for proxy server that JMeter is to use-J, --jmeterproperty &lt;argument&gt;=&lt;value&gt; Define additional JMeter properties-G, --globalproperty &lt;argument&gt;=&lt;value&gt; Define Global properties (sent to servers) e.g. -Gport=123 or -Gglobal.properties-D, --systemproperty &lt;argument&gt;=&lt;value&gt; Define additional system properties-S, --systemPropertyFile &lt;argument&gt; additional system property file(s)-f, --forceDeleteResultFile force delete existing results files and web report folder if present before starting the test-L, --loglevel &lt;argument&gt;=&lt;value&gt; [category=]level e.g. jorphan=INFO, jmeter.util=DEBUG or com .example.foo=WARN-r, --runremote Start remote servers (as defined in remote_hosts)-R, --remotestart &lt;argument&gt; Start these remote servers (overrides remote_hosts)-d, --homedir &lt;argument&gt; the jmeter home directory to use-X, --remoteexit Exit the remote servers at end of test (non-GUI)-g, --reportonly &lt;argument&gt; generate report dashboard only, from a test results file-e, --reportatendofloadtests generate report dashboard after load test-o, --reportoutputfolder &lt;argument&gt; output folder for report dashboard","link":"/2019/10/02/running-jmeter/"},{"title":"Setup QEMU for ARM 64","text":"NoteARM 64 architecture is also known as, aarch64. 1. Why we need QEMU?We cannot virtualize ARM on X86 machine, then wee need to emulate it. So, we need an emulator such as QEMU. 2. QEMU and HypervisorsQEMU can be used by virtualization hypervisors such as XEN and KVM. Hypervisors, underneath, can manage QEMU access to system resources. 3. Building QEMU for ARM 64 (aarch64)3.1 Buidling from the sourceThe reason for building from source is that we are going to have the latest release! 123456wget https://download.qemu.org/qemu-5.0.0.tar.xztar xvJf qemu-5.0.0.tar.xzcd qemu-5.0.0mkdir build &amp;&amp; cd build../configure --target-list=aarch64-softmmu aarch64-linux-usermake -j2 3.2 Build Config NoteIf you don’t specify target-list it will compile and build QEMU for all available target architectures. Which is unrelevant, because it takes a very long time and uses lots of disk space. To see available target architectures, run: 1./configure --help Then have a look at available values for -target-list parameter. After successful build the output would be in following directory: 1aarch64-softmmu/qemu-system-aarch64 3.3 Running QEMUGetting list of supported machines config: 1aarch64-softmmu/qemu-system-aarch64 -M help | grep orange It only shows orangepi-pc which is the version of Orange PI using Allwinner H3 (Cortex-A7) 32-bit ARM processor. It means that probably you cannot emulate for example boards with H6 chip with -M orangepi-pc option. However, if you run: 1aarch64-softmmu/qemu-system-aarch64 -cpu help You see that cortex-a53, architecture implemented by Allwinner H6, is in the list. We try anothe options in [armbian-orangepi-qemu] post in this regard. 3.4 Good to considerYou noticed, that we have build aarch64-linux-user in the target list. I don’t know exactly what it does, maybe emulates ARM-64 programs as Linux User-Space applications. 1aarch64-linux-user/qemu-aarch64 -cpu help Shows that it support much less architectures: 12345Available CPUs: cortex-a53 cortex-a57 cortex-a72 max","link":"/2020/05/29/setup-qemu-aarch64/"},{"title":"Common Apps on the snap service","text":"Install Apps VS Code 1sudo snap install code 1sudo snap install gtk-common-themes Gitkraken 1sudo snap install gitkraken Skype 1sudo snap install skype --classic MicroK8s 1sudo snap install microk8s --classic Sublime 1sudo snap install sublime-text --classic Update app1snap refresh gitkraken List installed apps1snap list List snap services1snap services Search for an app1snap search microk8s Manage snap service1234sudo systemctl start snapdsudo systemctl enable snapdsudo systemctl status snapsudo systemctl stop snap","link":"/2019/10/02/snap-common-apps/"},{"title":"Spring Security Authorization with JWT","text":"","link":"/2019/10/23/spring-authorize-jwt/"},{"title":"Spring Cloud with Jaeger","text":"Jaeger is an implementation of OpenTracing API which is written in go hence has a very good performance. The other well-known implementation is Zipkin which is developed by Netflix in Java. Running jaeger server 12345678910docker run -d --name jaeger \\ -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \\ -p 5775:5775/udp \\ -p 6831:6831/udp \\ -p 6832:6832/udp \\ -p 5778:5778 \\ -p 16686:16686 \\ -p 14268:14268 \\ -p 9411:9411 \\ jaegertracing/all-in-one Adding jaeger support to spring cloudAdd this dependency into the pom.xml: 1234567891011121314151617181920212223242526&lt;!-- OpenTracing Tracing &amp; Jaeger --&gt;&lt;dependency&gt; &lt;groupId&gt;io.opentracing.contrib&lt;/groupId&gt; &lt;artifactId&gt;opentracing-spring-cloud-starter&lt;/artifactId&gt; &lt;version&gt;0.3.2&lt;/version&gt; &lt;!-- Exclude the modules that you don't want to trace or instrument --&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;io.opentracing.contrib&lt;/groupId&gt; &lt;artifactId&gt;opentracing-spring-cloud-jdbc-starter&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;io.opentracing.contrib&lt;/groupId&gt; &lt;artifactId&gt;opentracing-jms-1&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;io.opentracing.contrib&lt;/groupId&gt; &lt;artifactId&gt;opentracing-jms-spring&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.jaegertracing&lt;/groupId&gt; &lt;artifactId&gt;jaeger-client&lt;/artifactId&gt; &lt;version&gt;1.0.0&lt;/version&gt;&lt;/dependency&gt; Create configuration bean 123456789101112131415import io.jaegertracing.internal.samplers.ProbabilisticSampler;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class TraceConfig { @Bean public io.opentracing.Tracer tracer() { return new io.jaegertracing.Configuration(\"manger-dashboard\") .withSampler(new io.jaegertracing.Configuration.SamplerConfiguration().withType(ProbabilisticSampler.TYPE).withParam(1)) .withReporter(new io.jaegertracing.Configuration.ReporterConfiguration()) .getTracer(); //return new // tracer instance of your choice (Zipkin, Jaeger, LightStep) }}","link":"/2019/09/30/spring-cloud-jaeger/"},{"title":"Common Spring JPA Config","text":"Add JPA data source with granule logging enabled1234567891011spring.datasource.url= jdbc:oracle:thin:@&lt;db&gt;:&lt;port&gt;:&lt;sid&gt;spring.datasource.username=&lt;user_name&gt;spring.datasource.password=&lt;password&gt;spring.datasource.driver-class-name=oracle.jdbc.OracleDriverspring.jpa.hibernate.ddl-auto=nonespring.jpa.generate-ddl=falsespring.jpa.show-sql=truelogging.level.org.hibernate.SQL=debuglogging.level.org.hibernate.type.descriptor.sql=trace Last two configs are specific to Hibernates.","link":"/2019/09/30/spring-jpa-config/"},{"title":"SSH Port Forwarding","text":"port-forwarding از طریق ssh برای مقاصد مختلفی استفاده می شود که در ادامه به چند کاربرد پر استفاده از آن اشاره خواهیم کرد: 1. دسترسی به یک سرور ریموت از طریق کامپیوتر واسطفرض کنید دسترسی به سرور 10.39.23.141 و پورت 982 آن صرفا برای 192.168.100.111 فراهم می باشد و می خواهیم از طریق 192.168.100.111 به آن سرویس دسترسی داشته باشیم: ‍‍‍‍‍‍‍‍‍‍‍‍1ssh -L 127.0.0.1:8686:10.39.23.141:982 user@192.168.100.111 2. ایجاد پراکسی سرور socks‍‍‍1sh -D 1337 -q -C -N -f user@192.168.10.20 تنظیم پراکسی در مرورگر فایرفاکس. تنظیم پراکسی در محیط ترمینال‍‍‍1234export http_proxy=socks5://127.0.0.1:1337export https_proxy=socks5://127.0.0.1:1337unset http_proxy # if you want to unset proxy config برخی برنامه ها این تنظیمات را نادیده می گیرند","link":"/2019/11/06/ssh-port-forwarding/"},{"title":"SSH Tutorial","text":"Connecting to a remote server with SSHBy client public key Generate client public key Add client public key to remote server By password credentials","link":"/2019/03/11/ssh-tutorial/"},{"title":"zsh CheetSheet","text":"- How to Export variables in zsh?Exporting variables in ~/.bashrc does not work for zsh, instead you should use the zsh own config file, i.e ~/.zshrc. - Setting zsh command history to unlimited","link":"/2019/06/24/zsh-cheetsheet/"}],"tags":[{"name":"cmake","slug":"cmake","link":"/tags/cmake/"},{"name":"boost","slug":"boost","link":"/tags/boost/"},{"name":"cpp","slug":"cpp","link":"/tags/cpp/"},{"name":"groovy","slug":"groovy","link":"/tags/groovy/"},{"name":"vscode","slug":"vscode","link":"/tags/vscode/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"blogging","slug":"blogging","link":"/tags/blogging/"},{"name":"ubuntu","slug":"ubuntu","link":"/tags/ubuntu/"},{"name":"debian","slug":"debian","link":"/tags/debian/"},{"name":"JDK","slug":"JDK","link":"/tags/JDK/"},{"name":"mxnet","slug":"mxnet","link":"/tags/mxnet/"},{"name":"javafx","slug":"javafx","link":"/tags/javafx/"},{"name":"keycloak","slug":"keycloak","link":"/tags/keycloak/"},{"name":"jwt","slug":"jwt","link":"/tags/jwt/"},{"name":"nginx","slug":"nginx","link":"/tags/nginx/"},{"name":"spring","slug":"spring","link":"/tags/spring/"},{"name":"security","slug":"security","link":"/tags/security/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"logging","slug":"logging","link":"/tags/logging/"},{"name":"netbeans","slug":"netbeans","link":"/tags/netbeans/"},{"name":"jenkins","slug":"jenkins","link":"/tags/jenkins/"},{"name":"CI-CD","slug":"CI-CD","link":"/tags/CI-CD/"},{"name":"redis","slug":"redis","link":"/tags/redis/"},{"name":"jmeter","slug":"jmeter","link":"/tags/jmeter/"},{"name":"testing","slug":"testing","link":"/tags/testing/"},{"name":"QEMU","slug":"QEMU","link":"/tags/QEMU/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"spring-cloud","slug":"spring-cloud","link":"/tags/spring-cloud/"},{"name":"jaeger","slug":"jaeger","link":"/tags/jaeger/"},{"name":"tracing","slug":"tracing","link":"/tags/tracing/"},{"name":"jpa","slug":"jpa","link":"/tags/jpa/"},{"name":"hibernate","slug":"hibernate","link":"/tags/hibernate/"},{"name":"ssh","slug":"ssh","link":"/tags/ssh/"},{"name":"proxy","slug":"proxy","link":"/tags/proxy/"},{"name":"zsh","slug":"zsh","link":"/tags/zsh/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"ARM","slug":"ARM","link":"/tags/ARM/"}],"categories":[{"name":"C++","slug":"C","link":"/categories/C/"},{"name":"groovy","slug":"groovy","link":"/categories/groovy/"},{"name":"Java","slug":"Java","link":"/categories/Java/"},{"name":"DL","slug":"DL","link":"/categories/DL/"},{"name":"DevOps","slug":"DevOps","link":"/categories/DevOps/"},{"name":"spring","slug":"spring","link":"/categories/spring/"},{"name":"embedded","slug":"embedded","link":"/categories/embedded/"},{"name":"shell","slug":"shell","link":"/categories/shell/"}]}